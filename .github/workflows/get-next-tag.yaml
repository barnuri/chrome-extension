name: test
on:
  push:
    branches:
      - master
  pull_request:
    branches: [ master ]
jobs:
  createTagAndRelease:
    permissions: write-all
    runs-on: ubuntu-latest
    name: Create Tag And Release
    outputs:
      tagName: ${{ steps.setTag.outputs.tagName }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        
      - name: Set Tag Name
        shell: bash
        run: |
          git fetch --tags
          newestTag=$(git describe --tags $(git rev-list --tags --max-count=1)) || true
          if [ -z "$newestTag" ]
          then
            newTag="1.0.0"
          else
            newTag="$newestTag"
          fi
          
          numberRegex='([0-9]+(\.[0-9]+)*)' # Corrected regular expression
          if [[ "$newTag" =~ $numberRegex ]]; then
              newTag="${BASH_REMATCH[0]}"
              echo "Extracted version number: $newTag"
          else
              echo "Didn't succeed in extracting the number from $newTag"
              newTag="1.0.0"
          fi
          
          major=$(echo "$version" | cut -d. -f1)
          minor=$($(echo "$version" | cut -d. -f2) || '0')
          patch=$($(echo "$version" | cut -d. -f3) || '0')
          // newTag=$(echo "$newestTag" | awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{if(length($NF+1)>length($NF))$(NF-1)++; $NF=sprintf("%0*d", length($NF), ($NF+1)%(10^length($NF))); print}')
          ((patch++))
          newTag="$major.$minor.$patch"
          
          echo "newestTag=$newestTag"
          echo "newTag=$newTag"
          echo "newTagName=$newTag" >> $GITHUB_ENV
          echo "::set-output name=tagName::$newTag"

      - name: Echo Version
        run: |
          echo "${{ env.newTagName }}"
          echo "${{ steps.setTag.outputs.tagName }}"
